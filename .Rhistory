swirl()
install.packages("swirl")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
swirl()
swirl()
install.packages(c("evaluate", "MASS", "memoise", "swirl"))
remove.packages("swirl")
remove.packages("swirl")
install.packages("swirl")
remove.packages("swirl")
remove.packages("swirl")
remove.packages("swirl")
remove.packages("swirl")
install.packages("swirl")
library("swirl")
swirl()
1:20
pi:10
15:1
?:
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(mu_seq)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Seong-yong Kim")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c("X", "Y", "Z"), sep="")
paste(1:3, c("X", "Y", "Z"), sep="")
LETTERS
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(,z), 100)
myData <- sample(c(y,z), 100)
myData
myNA <- is.na(myData)
myNA
myData = NA
myData == NA
sum(myNA)
myData
0 / 0
Inf /Inf
Inf - Inf
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
vect2
names(vect2) <- c("foo", "bar", "norf")
vect2
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4,5)
dim(myVector)
myVector
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix()
?matrix
myMatrix2 <- matric(1:20, 4, 5)
myMatrix2 <- matrix(1:20, 4, 5)
identical(myMatrix, myMatrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(myData) <- names
colnames(myData) <- cnames
myData
getwd()
ls
ls()
debug(ls)
ls()
ls()
?inverse.rle
matrix(1:4, 2, 2)
solve(matrix(1:4, 2, 2))
a <- matrix(1:4, 2, 2)
b <- solve(a)
a * b
a
b
a %*% b
?solve
?invers
?inverse
?inverse.gaussian
getwd()
setwd("~/git-repos/ProgrammingAssignment2")
source("cachematrix.R")
source("cachematrix.R")
a
b
solve(a)
cacheSolve(a)
class(a)
makeCacheMatrix(a)
class(a)
cacheSolve(a)
cache <- makeCacheMatrix(a)
cacheSolve(cache)
cacheSolve(cache)
cache
sample(2, 2)
sample(4, 2)
sample(4, 2, 2)
?sample
sample(1:12)
sample(c(0,1), 100, replace = TRUE)
?solve
x <- matrix(1:4, 2, 2)
x
x <- matrix(sample(4), 2, 2)
x
matrix(sample(4), 2, 2)
matrix(sample(4), 2, 2)
matrix(sample(4), 2, 2)
rep(matrix(sample(4), 2, 2), 10)
?repeat
}
repeat(1:10) {matrix(sample(4), 2, 2)}
?replicate
replicate(10, matrix(sample(4), 2, 2))
x <- replicate(10, matrix(sample(4), 2, 2))
x
x <- sapply(1:10, matrix(sample(4), 2, 2))
x <- replicate(10, matrix(sample(4), 2, 2), simplify = "list")
x
x <- replicate(10, matrix(sample(4), 2, 2), simplify = "data.frame")
x <- replicate(10, matrix(sample(4), 2, 2), simplify = "data.frame")
x
x <- replicate(10, matrix(sample(4), 2, 2), simplify = "vector")
x
x <- replicate(10, matrix(sample(4), 2, 2))
x
lapply(x, solve)
length(x)
matrix(sample(4), 2, 2)
x <- replicate(10, matrix(sample(4), 2, 2))
?quantile
x
dimnames(x)
dimnames(x)
x <- replicate(10, m = matrix(sample(4), 2, 2))
x <- replicate(10, matrix(sample(4), 2, 2))
?replicate
x <- c(replicate(10, m = matrix(sample(4), 2, 2)))
x <- c(replicate(10, matrix(sample(4), 2, 2)))
x
x <- data.frame(replicate(10, matrix(sample(4), 2, 2))
x
x <- data.frame(replicate(10, matrix(sample(4), 2, 2)))
x
x <- replicate(10, matrix(sample(4), 2, 2))
sapply(x, solve)
apply(x, 1, solve)
apply(x, 2, solve)
x <- lapply(replicate(10, matrix(sample(4), 2, 2)), append)
y <- c(matrix(sample(4), 2, 2), matrix(sample(4), 2, 2))
y
y <- list(matrix(sample(4), 2, 2), matrix(sample(4), 2, 2))
y
x <- replicate(10, matrix(sample(4), 2, 2), "list")
x
matrix(sample(8), 2, 2)
matrix(sample(8), 2, 2, 2)
x <- list(replicate(10, matrix(sample(4), 2, 2)))
x
?list
x <- replicate(10, matrix(sample(4), 2, 2), "list")
?repeat
()
for (i in 1:10) {matrix(sample(4), 2, 2)}
y <- for (i in 1:10) {matrix(sample(4), 2, 2)}
y
y <- for (i in 1:10) {matrix(sample(4), 2, 2)}
?loop
?replicate
lapply(1:10, matrix, sample(4), 2, 2)
lapply(sample(4), matrix, sample(4), 2, 2)
lapply(sample(4), matrix, 2, 2)
lapply(replicate(10, sample(4)), matrix, 2, 2)
lapply(replicate(3, sample(4)), matrix, 2, 2)
lapply(replicate(3, sample(4)), matrix, 2, 2)
y <- list(matrix(sample(4), 2, 2), matrix(sample(4), 2, 2))
y
lapply(y, solve)
as.list(replicate(3, sample(4)), matrix, 2, 2))
as.list(replicate(3, matrix(sample(4), 2, 2)))
replicate(3, matrix(sample(4), 2, 2))
y <- replicate(3, matrix(sample(4), 2, 2))
class(y)
as.list(y)
y <- list(matrix(1:4, 2, 2), matrix(10:14, 2, 2), matrix(1:4, 2, 2))
y <- list(matrix(1:4, 2, 2), matrix(10:14, 2, 2), matrix(1:4, 2, 2))
matrix(1:4)
matrix(1:4, 2)
y <- list(matrix(1:4, 2), matrix(11:14, 2), matrix(1:4, 2))
y
z <- replicate(3, matrix(sample(4), 2))
z
apply(z, 3, solve)
apply(z, 1, solve)
apply(z, 2, solve)
apply(z, 3, solve)
?apply
y
lapply(y, solve)
lapply(y, cacheSolve)
lapply(y, cacheSolve(makeCacheMatrix))
z
y
lapply(y, makeCacheMatrix)
c1 <- lapply(y, makeCacheMatrix)
c1[1]
all.equal(c1[1], c1[3])
all.equal(c1[1], c1[2])
y
?same
?dup
?red
identical(c1[1], c1[2])
identical(c1[1], c1[3])
source("cachematrix.R")
y
cacheSolve(y[1])
y[1]
solve(y[1])
cacheSolve(matrix(1:4, 2))
cacheSolve(matrix(1:4, 2))
cacheSolve(matrix(1:4, 2))
source("cachematrix.R")
cacheSolve(matrix(1:4, 2))
cacheSolve(matrix(1:4, 2))
cache
source("cachematrix.R")
cacheSolve(matrix(1:4, 2))
source("cachematrix.R")
cacheSolve(matrix(1:4, 2))
cacheSolve(matrix(1:4, 2))
y
y <- list(matrix(1:4, 2), matrix(11:14, 2), matrix(1:4, 2))
y
lapply(y, solve)
lapply(y, cacheSolve)
identical(y[1], y[2])
identical(y[1], y[3])
?hash
?map
source("cachematrix.R")
c <- makeCacheMatrix(matrix(1:4, 2))
c
replicate(10, cacheSolve(y))
replicate(10, cacheSolve(c))
source("cachematrix.R")
c <- makeCacheMatrix(matrix(1:4, 2))
replicate(10, cacheSolve(c))
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
amatrix$getsolve()
cacheSolve(amatrix)
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
cacheSolve(amatrix)
source("cachematrix.R")
history()
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
cacheSolve(amatrix)
source("cachematrix2.R")
cr <- makeCacheFunctions(matrix(1:4, 2), solve)
cr
cacheResult(cr)
cacheResult(cr)
cr$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheResult(cr)
cacheResult(cr)
cacheResult(cr)
source("cachematrix2.R")
cr <- makeCacheFunctions(matrix(1:4, 2), solve)
cacheResult(cr)
cacheResult(cr)
source("cachematrix2.R")
cr <- makeCacheFunctions(matrix(1:4, 2), solve)
cacheResult(cr)
cacheResult(cr)
cr$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cr$getResult()
cr$getResult()
cr <- makeCacheFunctions(matrix(1:4, 2), solve)
cr$getResult()
cr$getResult()
cr$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cr$getResult()
cr$getResult()
source("cachematrix2.R")
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
cacheSolve(amatrix)
cacheSolve(amatrix)
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
cacheSolve(amatrix)
cr <- makeCacheFunctions(matrix(1:4, 2), solve)
cacheResult(cr)
cacheResult(cr)
cr$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cr$getResult()
cr$getResult()
cacheResult(cr)
source("cachematrix.R")
source("cachematrix.R")
getwd()
